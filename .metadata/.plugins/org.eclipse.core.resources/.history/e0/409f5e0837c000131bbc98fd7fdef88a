/*
 * Copyright (c) 2009-2012 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "tubiiUtil.h"
#include "testtubii.h"
#include "testPulser.h"
#include "xgpiops.h"
#include "sys/mman.h"
#include <fcntl.h>

int main()
{
    printf("Hello World\n\r");

    double Data0= 30, Data1= 12;
    u32 BaseAddressTUBii= XPAR_TESTTUBII_0_S00_AXI_BASEADDR;
    u32 BaseAddressPulser = XPAR_TESTPULSER_0_S00_AXI_BASEADDR;
    u32 HighAddressTUBii= XPAR_TESTTUBII_0_S00_AXI_HIGHADDR;
    u32 HighAddressPulser = XPAR_TESTPULSER_0_S00_AXI_HIGHADDR;
    u32 RegOffsetTUBii0= TESTTUBII_S00_AXI_SLV_REG0_OFFSET;
    u32 RegOffsetTUBii1= TESTTUBII_S00_AXI_SLV_REG1_OFFSET;
    u32 RegOffsetTUBii2= TESTTUBII_S00_AXI_SLV_REG2_OFFSET;

    //Begin memory mapping
    printf("Begin Memory Mapping \n\r");
    int memfd;
    void *MappedBaseAddress, *MappedBaseAddressTUBii, *MappedBaseAddressPulser;
    off_t dev_base = BaseAddressPulser;
    printf("dev_base = %x\n", dev_base);

    // Open Memory location
    memfd = open("/dev/mem", O_RDWR | O_SYNC);
    if (memfd == -1){
    	printf("Can't open /dev/mem.\n");
    	exit(0);
    }

    // Map into user space the area of memory containing the device
    MappedBaseAddress = mmap(0, (HighAddressTUBii-BaseAddressPulser), PROT_READ | PROT_WRITE, MAP_SHARED, memfd, dev_base & ~(HighAddressTUBii-BaseAddressPulser-1));
    if (MappedBaseAddress == (void *) -1){
    	printf("Can't map the memory to user space.\n");
        exit(0);
    }
    printf("mapped_base = %x\n", MappedBaseAddress);

    // Do the addition thing...
    MappedBaseAddressTUBii = MappedBaseAddress + (BaseAddressTUBii - BaseAddressPulser);
    TESTTUBII_mWriteReg(MappedBaseAddressTUBii, RegOffsetTUBii0, 0);
    TESTTUBII_mWriteReg(MappedBaseAddressTUBii, RegOffsetTUBii1, 0);
    TESTTUBII_mWriteReg(MappedBaseAddressTUBii, RegOffsetTUBii2, 0);

    int i=0;
    for(i=0; i<10; i++)
    {
    	TESTTUBII_mWriteReg(MappedBaseAddressTUBii, RegOffsetTUBii0, Data0);
    	printf("%d + ",TESTTUBII_mReadReg(MappedBaseAddressTUBii, RegOffsetTUBii0));

    	TESTTUBII_mWriteReg(MappedBaseAddressTUBii, RegOffsetTUBii1, Data1);
    	printf("%d = ",TESTTUBII_mReadReg(MappedBaseAddressTUBii, RegOffsetTUBii1));

    	TESTTUBII_mWriteReg(MappedBaseAddressTUBii, RegOffsetTUBii2, Data0);
    	printf("%d\n",TESTTUBII_mReadReg(MappedBaseAddressTUBii, RegOffsetTUBii2));

    	Data0 += 1;
    	Data1 += 3;
    }

    sleep(5);

    // Now do pulser...
    MappedBaseAddressPulser = MappedBaseAddress;
    u32 RegOffsetPulser0 = TESTPULSER_S00_AXI_SLV_REG0_OFFSET;
    u32 RegOffsetPulser1 = TESTPULSER_S00_AXI_SLV_REG1_OFFSET;
    u32 RegOffsetPulser2 = TESTPULSER_S00_AXI_SLV_REG2_OFFSET;
    u32 RegOffsetPulser3 = TESTPULSER_S00_AXI_SLV_REG3_OFFSET;
    u32 reg0[1000], reg1[1000], reg2[1000], reg3[1000];
    double DataP=2000;
    TESTPULSER_mWriteReg(MappedBaseAddressPulser, RegOffsetPulser0, DataP);
    int j=0;
    while(j<100){
    	reg0[j]=TESTPULSER_mReadReg(MappedBaseAddressPulser, RegOffsetPulser0);
    	reg1[j]=TESTPULSER_mReadReg(MappedBaseAddressPulser, RegOffsetPulser1);
    	reg2[j]=TESTPULSER_mReadReg(MappedBaseAddressPulser, RegOffsetPulser2);
    	reg3[j]=TESTPULSER_mReadReg(MappedBaseAddressPulser, RegOffsetPulser3);
    	j++;
    }

    j=0;
    while(j<100){
    	printf("%d\t",reg0[j]);
    	printf("%d\t",reg1[j]);
    	printf("%d\t",reg2[j]);
    	printf("%d\n",reg3[j]);
    	j++;
    }

    sleep(5);

    // Take an external input
	XGpioPs Gpio;
	int Status;
	XGpioPs_Config *GPIOConfigPtr;
	int pbsw=51;

    // GPIO Initilization – Existing from the last blog
    GPIOConfigPtr = XGpioPs_LookupConfig(XPAR_XGPIOPS_0_DEVICE_ID);
    Status = XGpioPs_CfgInitialize(&Gpio, GPIOConfigPtr,GPIOConfigPtr->BaseAddr);
    if (Status != XST_SUCCESS) {
    	printf("GPIO INIT FAILED\n\r");
    	return XST_FAILURE;
    }

    //set direction input pin
    //XGpioPs_SetDirectionPin(&Gpio, pbsw, 0x0);

    while(pbsw){
    u32 sw = XGpioPs_ReadPin(&Gpio, pbsw); //read pin
    int toggle=1;
    if (sw == 1) { //sw=1 when switch is pushed
        toggle = !toggle; //invert value stored in toggle
      }

    printf("switch value %lu \n\r",sw); //output the sw value
    sleep(1);
    }

    printf("Goodbye World\n");

    return 0;
}

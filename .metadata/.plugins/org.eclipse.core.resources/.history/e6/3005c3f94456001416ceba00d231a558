/*
 * Copyright (c) 2009-2012 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "tubiiUtil.h"
#include "loadShift.h"
#include "sys/mman.h"
#include <fcntl.h>

int main(int argc, char *argv[])
{
    printf("Hello World\n\r");

    if(argc != 3){
    	printf("%i arguments...\n", argc);
    	return -1;
    }
    int mux= atoi(argv[1]);
    printf("argv = %i\n", mux);
    int data= atoi(argv[2]);
    printf("argv = %i\n", data);

    u32 BaseMXAddress= XPAR_MUXERINPUT_0_S00_AXI_BASEADDR;
    u32 HighMXAddress= XPAR_MUXERINPUT_0_S00_AXI_HIGHADDR;
    u32 BaseLSAddress= XPAR_LOADSHIFT_0_S00_AXI_BASEADDR;
    u32 HighLSAddress= XPAR_LOADSHIFT_0_S00_AXI_HIGHADDR;
    u32 RegOffset0= REG0_OFFSET;
    u32 RegOffset1= REG1_OFFSET;
    u32 RegOffset2= REG2_OFFSET;
    u32 RegOffset3= REG3_OFFSET;

    //Begin memory mapping
    printf("Begin Memory Mapping \n\r");
    int memfd;
    void *MappedBaseAddress;
    off_t dev_base = BaseLSAddress;

    // Open Memory location
    memfd = open("/dev/mem", O_RDWR | O_SYNC);
    if (memfd == -1){
    	printf("Can't open /dev/mem.\n");
    	exit(0);
    }

    // Map into user space the area of memory containing the device
    MappedBaseAddress = mmap(0, (HighMXAddress-BaseLSAddress), PROT_READ | PROT_WRITE, MAP_SHARED, memfd, dev_base & ~(HighMXAddress-BaseLSAddress-1));
    if (MappedBaseAddress == (void *) -1){
    	printf("Can't map the memory to user space.\n");
        exit(0);
    }

    printf("Loop\n");
    sleep(1);

    void* MappedMXBaseAddress = MappedBaseAddress + (BaseMXAddress-BaseLSAddress);

    mWriteReg(MappedBaseAddress, RegOffset0, 0);
    mWriteReg(MappedBaseAddress, RegOffset1, 0);
    mWriteReg(MappedBaseAddress, RegOffset2, 0);
    mWriteReg(MappedBaseAddress, RegOffset3, 0);
    mWriteReg(MappedMXBaseAddress, RegOffset0, 0);
    mWriteReg(MappedMXBaseAddress, RegOffset1, 0);
    mWriteReg(MappedMXBaseAddress, RegOffset2, 0);
    mWriteReg(MappedMXBaseAddress, RegOffset3, 0);

	u32 muxprime= (u32) mux;
	mWriteReg(MappedBaseAddress, RegOffset0, muxprime);
	printf("Choose Muxer: %x\n",  mReadReg(MappedMXBaseAddress, RegOffset0));

	u32 dataprime= (u32) data;
	mWriteReg(MappedMXBaseAddress, RegOffset0, dataprime);
	printf("Write Data: %x\n",  mReadReg(MappedBaseAddress, RegOffset0));

    munmap((void*)MappedBaseAddress, (HighMXAddress-BaseLSAddress));

    printf("Goodbye World\n");

    return 0;
}
